// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.DB.DataContext;

namespace Model.Migrations
{
    [DbContext(typeof(SQLServerDataContext))]
    [Migration("20210408115714_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DepartmentProject", b =>
                {
                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.HasKey("DepartmentID", "ProjectID");

                    b.HasIndex("ProjectID");

                    b.ToTable("DepartmentProject");
                });

            modelBuilder.Entity("Model.DB.Tables.Authority", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Authorities");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "管理者"
                        },
                        new
                        {
                            ID = 2,
                            Name = "一般ユーザー"
                        });
                });

            modelBuilder.Entity("Model.DB.Tables.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "開発"
                        },
                        new
                        {
                            ID = 2,
                            Name = "営業"
                        });
                });

            modelBuilder.Entity("Model.DB.Tables.Issue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IssueStatusID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IssueStatusID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UserID");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("Model.DB.Tables.IssueStatus", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("IssueStatuses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Status = "未解決"
                        },
                        new
                        {
                            ID = 2,
                            Status = "解決"
                        },
                        new
                        {
                            ID = 3,
                            Status = "保留"
                        },
                        new
                        {
                            ID = 4,
                            Status = "取下"
                        });
                });

            modelBuilder.Entity("Model.DB.Tables.Message", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IssueID")
                        .HasColumnType("int");

                    b.Property<string>("PostMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IssueID");

                    b.HasIndex("UserID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Model.DB.Tables.Project", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectStatusID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProjectStatusID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Model.DB.Tables.ProjectStatus", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ProjectStatuses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Status = "未着手"
                        },
                        new
                        {
                            ID = 2,
                            Status = "要求分析"
                        },
                        new
                        {
                            ID = 3,
                            Status = "要件定義"
                        },
                        new
                        {
                            ID = 4,
                            Status = "基本設計"
                        },
                        new
                        {
                            ID = 5,
                            Status = "詳細設計"
                        },
                        new
                        {
                            ID = 6,
                            Status = "開発"
                        },
                        new
                        {
                            ID = 7,
                            Status = "内部テスト"
                        },
                        new
                        {
                            ID = 8,
                            Status = "ユーザーテスト"
                        },
                        new
                        {
                            ID = 9,
                            Status = "リリース準備"
                        },
                        new
                        {
                            ID = 10,
                            Status = "リリース"
                        });
                });

            modelBuilder.Entity("Model.DB.Tables.SignIn", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignInID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("SignIns");
                });

            modelBuilder.Entity("Model.Tables.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorityID")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Neme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SignInID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AuthorityID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("SignInID")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DepartmentProject", b =>
                {
                    b.HasOne("Model.DB.Tables.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.DB.Tables.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.DB.Tables.Issue", b =>
                {
                    b.HasOne("Model.DB.Tables.IssueStatus", "IssueStatus")
                        .WithMany("Issues")
                        .HasForeignKey("IssueStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.DB.Tables.Project", "Project")
                        .WithMany("Issue")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Tables.User", "User")
                        .WithMany("Issues")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("IssueStatus");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.DB.Tables.Message", b =>
                {
                    b.HasOne("Model.DB.Tables.Issue", "Issue")
                        .WithMany("Messages")
                        .HasForeignKey("IssueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Tables.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.DB.Tables.Project", b =>
                {
                    b.HasOne("Model.DB.Tables.ProjectStatus", "ProjectStatus")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectStatus");
                });

            modelBuilder.Entity("Model.Tables.User", b =>
                {
                    b.HasOne("Model.DB.Tables.Authority", "Authority")
                        .WithMany("Users")
                        .HasForeignKey("AuthorityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.DB.Tables.Department", "Department")
                        .WithMany("User")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.DB.Tables.SignIn", "SignIn")
                        .WithOne("User")
                        .HasForeignKey("Model.Tables.User", "SignInID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Authority");

                    b.Navigation("Department");

                    b.Navigation("SignIn");
                });

            modelBuilder.Entity("Model.DB.Tables.Authority", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Model.DB.Tables.Department", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.DB.Tables.Issue", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Model.DB.Tables.IssueStatus", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("Model.DB.Tables.Project", b =>
                {
                    b.Navigation("Issue");
                });

            modelBuilder.Entity("Model.DB.Tables.ProjectStatus", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Model.DB.Tables.SignIn", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Tables.User", b =>
                {
                    b.Navigation("Issues");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
